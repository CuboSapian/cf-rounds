// int curMEx(vll& v)
// {
//     set<ll> st;
//     for(int i=0;i<=v.size();i++)
//         st.insert(i);
//     for(int i=0;i<v.size();i++)
//         st.erase(v[i]);
//     return *st.begin();
// }

// bool check(ll cl,ll cw,map<ll,set<ll>> len,map<ll,set<ll>> wid, vpll& v, ll n)
// {
//     ll temp=0;
//     while(temp < n)
//     {
//         if(len[cl].size())
//         {
//             ll idx=*len[cl].begin();
//             len[cl].erase(idx);
//             wid[v[idx].second].erase(idx);
//             cw-=v[idx].second;
//             temp++;
//         }
//         else if(wid[cw].size())
//         {
//             ll idx=*wid[cw].begin();
//             wid[cw].erase(idx);
//             len[v[idx].first].erase(idx);
//             cl-=v[idx].first;
//             temp++;
//         }
//         else
//         {
//             return false;
//         }
//     }
//     return true;
// }

void solve()
{
    // // A
    // string s;
    // cin>>s;
    // if(s.size()==1)
    // {
    //     if(s[0]=='_')
    //         cout<<"2\n";
    //     else
    //         cout<<"1\n";
    //     return;
    // }
    // else
    // {
    //     ll n=s.size(),ans=0;
    //     for(ll i=0;i<s.size();i++)
    //     {
    //         if(s[i]=='_')
    //         {
    //             ans+=(i==0 || s[i-1]!='^') + (i==n-1 || s[i+1]!='^');
    //             s[i]='^';
    //         }
    //         // cout<<ans<<" ";
    //     }
    //     cout<<ans<<endl;
    // }

    // // B
    // string s;
    // cin>>s;
    // // cout<<s<<" ";
    // ll n=s.size();
    // s+=s;
    // n*=2;
    // ll lon=0;
    // for(int i=0;i<n;i++)
    // {
    //     if(s[i]=='1')
    //     {
    //         ll temp=0;
    //         while(i<n && s[i]=='1') i++,temp++;
    //         lon=max(temp , lon);
    //     }
    // }
    // // cout<<lon<<" ";
    // if(lon==n)
    // {
    //     n/=2;
    //     cout<<(n*n)<<endl;
    //     return;
    // }
    // if(lon==0)
    //     cout<<"0\n";
    // else if(lon==1)
    //     cout<<"1\n";
    // else
    // cout<<((lon+1)*(lon+1))/4<<endl;

    // // C
    // ll n;
    // cin>>n;
    // vll v(n);
    // for(int i=0;i<n;i++)
    //     cin>>v[i];
    // ll x=curMEx(v);
    // if(x==v.size())
    // {
    //     cout<<"NO\n";
    //     return;
    // }
    // x++;
    // ll st=-1,end=-1;
    // for(int i=0;i<n;i++)
    // {
    //     if(v[i]==x)
    //     {
    //         st=i;
    //         break;
    //     }
    // }
    // for(int i=n-1;i>=0;i--)
    // {
    //     if(v[i]==x)
    //     {
    //         end=i;
    //         break;
    //     }
    // }
    // if(st==end)
    // {
    //     cout<<"YES\n";
    //     return;
    // }
    // else
    // {
    //     for(int i=st;i<=end;i++)
    //         v[i]=x-1;
    // }
    // if(curMEx(v)==x)
    //     cout<<"YES\n";
    // else
    //     cout<<"NO\n";

    // // D
    // ll n;
    // cin>>n;
    // vpll dim(n);
    // ll maxL=-1,maxW=-1,area=0;
    // map<ll,set<ll>> len,wid;
    // for(int i=0;i<n;i++)
    // {
    //     cin>>dim[i].first>>dim[i].second;
    //     area += dim[i].first * dim[i].second;
    //     maxL=max(dim[i].first , maxL);
    //     maxW=max(dim[i].second , maxW);
    //     len[dim[i].first].insert(i);
    //     wid[dim[i].second].insert(i);
    // }
    // // cout<<area<<" "<<maxL<<" "<<maxW<<endl;
    // set<pair<ll,ll>> ans;
    // if(area%maxL==0 && check(maxL , area/maxL , len ,wid , dim , n))
    // {
    //     ans.insert({maxL , area/maxL});
    // }
    // if(area%maxW==0 && check(area / maxW , maxW , len ,wid, dim ,n))
    // {
    //     ans.insert({area / maxW , maxW});
    // }
    // cout<<ans.size()<<endl;
    // for(auto i: ans)
    //     cout<<i.first<<" "<<i.second<<endl;
}
